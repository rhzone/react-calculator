{"version":3,"sources":["Keyboard.jsx","lib/expression.js","Calculator.jsx","serviceWorker.js","index.js"],"names":["KEYS","Key","props","react_default","a","createElement","className","type","onClick","value","Keyboard","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","_this","keysWrapper","map","index","Component","validateExpression","exprStr","exprArray","replace","split","lastExprOp","slice","pop","includes","bracketStack","count","forEach","push","i","length","previous","opType","next","isOperator","isBracket","isNumber","checkBracket","priority","op","isLeftBracket","isRightBracket","isDot","isStringNumber","str","Number","isInteger","parseInt","Calculator","call","state","expression","handleClick","bind","assertThisInitialized","result","_opType","lastOp","join","postFixExpr","operandStack","Error","calculate","infixExprArray","Array","isArray","topOperator","output","operatorStack","b","parseFloat","toPostFixExpr","_unused","setState","Keyboard_Keyboard","Boolean","window","location","hostname","match","ReactDOM","render","src_Calculator_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f9f8be6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Keyboard.css'\n\n\nexport const KEYS = [\n  'AC', '(', ')', '÷',\n  '7', '8', '9', 'x',\n  '4', '5', '6', '-',\n  '1', '2', '3', '+',\n  'Del', '0', '.', '='\n];\n\nfunction Key(props) {\n  return (\n    <button className=\"keyboard-item\" type=\"button\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nexport class Keyboard extends Component {\n  render() {\n    const keysWrapper = KEYS.map((value, index) => (\n      <Key key={value} value={value} onClick={() => this.props.onClick(index)}></Key>\n    ));\n    return (\n\n      <div className=\"keyboard\">\n        {keysWrapper}\n      </div>\n    )\n  }\n}\n","/* 主要算法: 利用了堆栈数据结构 */\n\nfunction validateExpression(exprStr) {\n  let exprArray = exprStr.replace(/\\s/g, '').split('');\n  let operator = ['+', '-', 'x', '÷'];\n  let lastExprOp = exprArray.slice().pop();\n  // operator 和 '(' 不能位于末尾\n  if (operator.includes(lastExprOp) || lastExprOp === '(') {\n    return false;\n  }\n  return checkBracket(exprArray);\n}\n\nfunction checkBracket(exprArray) {\n  /* 括号配对处理 */\n  let bracketStack = [];\n  // 判断左右括号个数是否相等\n  let count = 0;\n  exprArray.forEach((value, index) => {\n    if (value === '(') {\n      count++;\n      bracketStack.push(index);\n    }else if (value === ')') {\n      count--;\n      if (bracketStack.pop() === index - 1) {\n        // just to break the balance\n        count--;\n      };\n    }\n  })\n  /* todo */\n  for (let i = 1; i < exprArray.length - 1; i++) {\n    let previous = opType(exprArray[i - 1]);\n    let next = opType(exprArray[i + 1])\n    if (exprArray[i] === '(') {\n      if (!(previous.isOperator || previous.isBracket) || !(next.isNumber || next.isBracket)) {\n        return false;\n      }\n    }else if (exprArray[i] === ')') {\n      if (!(previous.isNumber || previous.isBracket) || !(next.isOperator || next.isBracket)) {\n        return false;\n      }\n    }\n  }\n  return bracketStack.length === 0 && count === 0;\n}\n\nfunction priority(op) {\n  switch(op) {\n    case '+':\n    case '-':\n      return 1;\n    case 'x':\n    case '÷':\n      return 2;\n    default:\n      return 0;\n  }\n}\nfunction comparePriority(a, b) {\n  return (priority(a.replace(/\\s/g, '')) - priority(b.replace(/\\s/g, ''))) >= 0\n}\n\nfunction toPostFixExpr(infixExprArray) {\n  if (!Array.isArray(infixExprArray)) {\n    throw Error(\"Parameter of function toPostFixExpr must be an array or a string\");\n  }\n  // 存储操作符\n  let output = [];\n  let operatorStack = [];\n  // the top operator of operatorStack\n  let topOperator;\n  // 存储操作数\n  infixExprArray.forEach(op => {\n    let {isOperator, isLeftBracket, isRightBracket, isNumber} = opType(op);\n    if (isNumber) {\n      output.push(parseFloat(op));\n    }else if (isOperator){\n      for (let i = 0; i < operatorStack.length; i++) {\n        topOperator = operatorStack.slice().pop();\n        if (comparePriority(topOperator, op) && topOperator !== '(') {\n          output.push(operatorStack.pop());\n        }else if (topOperator === '(') {\n          break;\n        }\n      }\n      operatorStack.push(op);\n    }else if (isLeftBracket) {\n      operatorStack.push(op);\n    }else if (isRightBracket) {\n      operatorStack.slice().forEach(() => {\n        topOperator = operatorStack.slice().pop();\n        if (topOperator !== '(') {\n          output.push(operatorStack.pop());\n        }else if (topOperator === '(') {\n          operatorStack.pop();\n        }\n      });\n    }\n  });\n  operatorStack.slice().forEach(() => {\n    output.push(operatorStack.pop());\n  });\n  return output;\n}\n\nfunction calculate(postFixExpr) {\n  let operandStack = [];\n  let result;\n  postFixExpr.forEach((value) => {\n    if (typeof(value) === 'number') {\n      operandStack.push(value);      \n    }else {\n      switch(value.replace(/\\s/g, '')) {\n        case '-':\n          result = -operandStack.pop() + operandStack.pop();\n          break;\n        case 'x':\n          result = operandStack.pop() * operandStack.pop();\n          break;\n        case '÷':\n          if (operandStack.slice().pop() === 0) {\n            throw Error(\"0 不能作为被除数\");\n          }\n          result = 1 / operandStack.pop() * operandStack.pop();\n          break;\n        default:\n          result = operandStack.pop() + operandStack.pop();\n          break;\n      }\n      operandStack.push(result);\n    }\n  })\n  return operandStack.pop();\n}\nfunction opType(op) {\n  let isOperator = ['+', '-', 'x', '÷'].includes(op.replace(/\\s/g, ''));\n  let isLeftBracket = op === '(';\n  let isRightBracket = op === ')';\n  let isBracket = isLeftBracket || isRightBracket;\n  let isDot = op === '.';\n  let isNumber = isStringNumber(op);\n  return {\n    isOperator,\n    isBracket,\n    isLeftBracket,\n    isRightBracket,\n    isNumber,\n    isDot,\n  }\n}\n\nfunction isStringNumber(str) {\n  return Number.isInteger(parseInt(str));\n}\n\nexport {\n  validateExpression,\n  opType,\n  isStringNumber,\n  toPostFixExpr,\n  calculate,\n}\n\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './Calculator.css';\nimport {Keyboard, KEYS} from './Keyboard';\nimport {validateExpression, opType, isStringNumber, toPostFixExpr, calculate} from './lib/expression';\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expression: ['0'],\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(i) {\n    let expression = this.state.expression;\n    let key = KEYS[i];\n    let result = null;\n    let {isOperator, isDot, isNumber, isBracket} = opType(key);\n    let lastOp = expression.slice().pop();\n    if (key === 'AC') {\n      // clear the expression\n      expression = ['0'];\n    }else if (key === '='){\n      // calculate the expression\n      if (validateExpression(expression.join(''))) {\n        try {\n          result = calculate(toPostFixExpr(expression))\n        }catch {\n          result = \"Syntax Error\";\n        }\n      }else {\n        result = 'Syntax Error';\n      }\n    }else if (key === 'Del') {\n      if (expression[0] !== '0' && !isStringNumber(lastOp)) {\n        expression.pop();\n      }else if (expression[0] !== '0' && isStringNumber(lastOp)){\n        expression.pop();\n        lastOp.slice(0, -1) !== '' && expression.push(lastOp.slice(0, -1))\n      }\n      expression.length === 0 && expression.push('0');\n    }else {\n      // change the expression\n      // 当第一个 op 为 0, 且式子的长度为 0 时\n      if (expression[0] === '0' && expression.length === 1 && (isNumber || isBracket)) {\n        expression[0] = key;\n      }else if (isOperator) {\n        key = ' ' + key + ' ';\n        this.state.isOperator && expression.pop();\n        expression.push(key);\n      }else if (isNumber) {\n        if (isStringNumber(lastOp)) {\n          expression.push(expression.pop() + key);\n        }else {\n          expression.push(key);\n        }\n      }else if (isDot) {\n        if (isStringNumber(lastOp) && !lastOp.includes('.')) {\n          expression.push(expression.pop() + key);\n        }else if(!lastOp.includes('.')) {\n          expression.push('0.');\n        }\n      }else {\n        expression.push(key);\n      }\n    }\n    this.setState({\n      expression,\n      isOperator,\n      result,\n    });\n    \n  }\n  render() {\n    let expression = this.state.expression;\n    let result = this.state.result;\n    if (typeof(result) === 'number') {\n      result = '= ' + result;\n    }\n    return (\n      <div className=\"calculator\">\n        <div className=\"screen-display\">\n          <span>{expression.join('')}</span>\n          <span>{result}</span>\n        </div>\n        <Keyboard onClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}